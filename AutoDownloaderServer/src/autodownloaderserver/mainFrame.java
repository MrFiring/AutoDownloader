/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package autodownloaderserver;

import ads_util.Util;

import java.awt.Color;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import javax.swing.*;

/**
 *
 * @author Adminb
 */
public class mainFrame extends javax.swing.JFrame {

    /**
     * Creates new form mainFrame
     */
    public mainFrame() {
        initComponents();
        
        ///update jList_Files
        
            update_FilesList();
            
        ///End update
        
  
        
            
            
        //CLEAR LOG BTN
        jButton1.addActionListener(new ActionListener(){
              @Override
              public void actionPerformed(ActionEvent e){
                  ta_log.setText("");
                 // jLogger.logger.println("Hello wolrd");
              }
        });
        
        //CLIENTS UPDATE BTN
        jBtn_ClUpdate.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
               update_ClientsList();
            }
        });
        
        //DISCONNECT CLIENTS BTN
        jBtn_DisconClients.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
               List<String> list =   jList_Clients.getSelectedValuesList();
                if(list.isEmpty())
                    return;
                
               for(String str : list){
                   ClientPool.deleteClient(str);
                }
                
                update_ClientsList();
            }
        });
        ////
        
        
        //FILES DELETE BTN
        jBtn_DelFile.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                
                 List<String> sel =  jList_Files.getSelectedValuesList();
                if(sel != null)
                 if(!sel.isEmpty()){
                     for(String str : sel){
                        File f = new File(ClientPool.serv.getDirectory().endsWith("/") ? 
                                            ClientPool.serv.getDirectory()+ "/" + str : ClientPool.serv.getDirectory() + str);
                      
                        if(f.delete())
                           jLogger.logger.println("File is deleted: " + str); 
                        
                     }
                     update_FilesList();
                 }
            }
        });
        
        //FILES LIST UPDATE BTN
        jBtn_UpdFiles.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e){
                update_FilesList();
            }
        });
        
      
        
    }
    
    public void appendLog(String str){
        ta_log.append(str);
    }
    
    private void update_ClientsList(){
        Vector<String> vec = Util.fromClientToStrings();
        if(vec != null);
         jList_Clients.setListData(vec);
    }
    
    public void requestUpdateClients(){
        
        this.update_ClientsList();
    }
    
    private void update_FilesList(){
        String[] files = ClientPool.serv.getFilesList();
        
        
        if(files != null){
            if(files.length > 0){
                jList_Files.setListData(files);
                jLb_FilesCount.setText("Найдено " + String.valueOf(files.length) + " файлов.");
                jLb_FilesCount.setForeground(Color.decode("#028900"));
            }
        }
        else{
            jLb_FilesCount.setText("Файлы не найдены.");
            jLb_FilesCount.setForeground(Color.red);
            jLogger.logger.println_error("FILES NOT FOUND! IN: " + "\" " + ClientPool.serv.getDirectory() + " \".");
        }
        
    }
    
    public void setChSync(boolean is){
        this.jCh_AutoSync.setSelected(is);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ta_log = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList_Files = new javax.swing.JList();
        jBtn_UpdFiles = new javax.swing.JButton();
        jBtn_DelFile = new javax.swing.JButton();
        jLb_FilesCount = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList_Clients = new javax.swing.JList();
        jBtn_DisconClients = new javax.swing.JButton();
        jBtn_ClUpdate = new javax.swing.JButton();
        jCh_AutoSync = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Лог", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        ta_log.setColumns(20);
        ta_log.setRows(5);
        jScrollPane1.setViewportView(ta_log);

        jButton1.setText("Очистить");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(0, 399, Short.MAX_VALUE)
                .addComponent(jButton1))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Файлы", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jList_Files.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jList_Files.setToolTipText("");
        jScrollPane2.setViewportView(jList_Files);

        jBtn_UpdFiles.setText("Обновить");

        jBtn_DelFile.setText("Удалить");

        jLb_FilesCount.setText("0 файлов");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jBtn_DelFile, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jBtn_UpdFiles, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(jLb_FilesCount))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jBtn_UpdFiles)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtn_DelFile)
                .addGap(18, 18, 18)
                .addComponent(jLb_FilesCount)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Клиенты", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jList_Clients.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jList_Clients);

        jBtn_DisconClients.setText("Отключить");

        jBtn_ClUpdate.setText("Обновить");

        jCh_AutoSync.setText("Синхронизация");
        jCh_AutoSync.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCh_AutoSyncActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jBtn_DisconClients, javax.swing.GroupLayout.DEFAULT_SIZE, 111, Short.MAX_VALUE)
                        .addComponent(jBtn_ClUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jCh_AutoSync))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 297, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBtn_DisconClients)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jBtn_ClUpdate)
                .addGap(18, 18, 18)
                .addComponent(jCh_AutoSync)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(36, 36, 36)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCh_AutoSyncActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCh_AutoSyncActionPerformed
        try{
            ClientPool.serv.setAutoSync(jCh_AutoSync.isSelected());
            FileOutputStream fos = new FileOutputStream("./sync.setts");
            if(jCh_AutoSync.isSelected())
                fos.write("SYNC".getBytes());
            else
                fos.write("NOSYNC".getBytes());
            fos.close();
        }catch(Exception ex){
            jLogger.logger.println_error(ex.toString());
            ex.printStackTrace();
        }
  
        
    }//GEN-LAST:event_jCh_AutoSyncActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
          System.out.println(System.getProperty("os.name"));
       
         jLogger lg  =  new jLogger(new File("./log.txt"));
        jLogger.logger.println_dbg("LOADED");
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
       boolean isAutoSync = mainFrame.getAutoSyncSettings(new File("./sync.setts"));
        AutoDownloaderServer serv = new AutoDownloaderServer(21,22);
        serv.setAutoSync(isAutoSync);
        ClientPool.serv = serv;
        
        Thread thr = new Thread(serv);
        thr.start();
      
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                mainFrame frm = new mainFrame();
                lg.setFrm(frm);
                frm.setChSync(isAutoSync);
                ClientPool.mFrame = frm;
                frm.setVisible(true);
            }
        });
        
        
        
        
        lg.clear();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtn_ClUpdate;
    private javax.swing.JButton jBtn_DelFile;
    private javax.swing.JButton jBtn_DisconClients;
    private javax.swing.JButton jBtn_UpdFiles;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCh_AutoSync;
    private javax.swing.JLabel jLb_FilesCount;
    private javax.swing.JList jList_Clients;
    private javax.swing.JList jList_Files;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea ta_log;
    // End of variables declaration//GEN-END:variables

    ///Functions returns upper variables
    
        public javax.swing.JList get_jList_Clients(){ return this.jList_Clients;}
        
        
    ///End
    //Load settings
        public static boolean getAutoSyncSettings(File f){
//            try{
//                BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(f)));
//                String sync = br.readLine();
//                if(sync == null || sync.equals("NOSYNC"))
//                    return false;
//                else if(sync.equals("SYNC"))
//                    return true;
//                br.close();
//            }
//            catch(Exception ex){
//                ex.printStackTrace();
//                jLogger.logger.println_warning(ex.toString());
//            }
            return false;
        }

}
